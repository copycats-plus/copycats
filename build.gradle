plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'me.modmuss50.mod-publish-plugin' version '0.4.5'
}

def secrets = new Properties()
if (file("./secrets.properties").exists()) {
    file("./secrets.properties").withInputStream {
        stream -> secrets.load(stream)
    }
}

loom {
    mods {
        "copycats" {
            sourceSet sourceSets.main
        }
    }
    runs {
        // This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
        datagen {
            client()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            vmArg "-Dporting_lib.datagen.existing_resources=${file("src/main/resources")}"

            runDir "run-data"
        }
        server {
            server()

            runDir "run-server"
        }
    }
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you enable this line, sources will be generated.
    //withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDirs += [
            'src/generated/resources'
    ]
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
    maven {
        // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url = "https://cursemaven.com"
    }

    // Fabric-specific
    mavenCentral()
    maven {
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        url = "https://mvn.devos.one/snapshots/"
    }
    maven {
        url = "https://cursemaven.com"
    }
    maven {
        url = "https://jitpack.io"
    }
    maven { // Reach Entity Attributes
        url = "https://maven.jamieswhiteshirt.com/libs-release"
        content { includeGroup("com.jamieswhiteshirt") }
    }

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${mapping_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"
    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    modImplementation("net.fabricmc.fabric-api:fabric-api-deprecated:$fabric_version")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    implementation("io.github.llamalad7:mixinextras-forge:0.3.5")

    modImplementation("com.tterrag.registrate_fabric:Registrate:${registrate_version}")
    modImplementation("com.jozufozu.flywheel:flywheel-fabric-${flywheel_minecraft_version}:${flywheel_version}")
    modImplementation("com.jamieswhiteshirt:reach-entity-attributes:$reach_entity_attributes_version")
    modCompileOnly("com.simibubi.create:create-fabric-${create_minecraft_version}:${create_version}") { transitive = false }
    modRuntimeOnly("com.simibubi.create:create-fabric-${create_minecraft_version}:${create_version}")
    for (String module in port_lib_modules.split(",")) {
        modImplementation("io.github.fabricators_of_create.Porting-Lib:$module:$port_lib_version")
    }

    modImplementation("curse.maven:forge-config-api-port-fabric-547434:$config_api_id")

    // Example mod dependency with JEI - using the mod prefix ensures the dependency is remapped to your development mappings
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compile against the JEI API but do not include it at runtime
    modCompileOnly("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    modCompileOnly("mezz.jei:jei-${jei_minecraft_version}-fabric-api:${jei_version}")
    // at runtime, use the full JEI jar for fabric
    modRuntimeOnly("mezz.jei:jei-${jei_minecraft_version}-fabric:${jei_version}")

    // For compatibility mixins
    compileOnly("curse.maven:additional-placements-930469:${additionalplacements_curse_id}")

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    // Not necessary since Mixin is included in Fabric
    // annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    var replaceProperties = [
            minecraft_version   : minecraft_version,
            create_version_range: create_version_range,
            forge_config_range  : forge_config_range,
            mod_id              : mod_id,
            mod_name            : mod_name,
            mod_license         : mod_license,
            mod_version         : mod_version,
            mod_authors         : mod_authors,
            mod_description     : mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['fabric.mod.json', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "copycats.mixins.json"
        ])
    }
}

tasks.jar.configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "copycats.mixins.json"
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}


tasks.publishMods.dependsOn(tasks.assemble)
tasks.publishMods.mustRunAfter(tasks.build)

publishMods {
    changelog = "Check out the detailed changelog at https://github.com/copycats-plus/copycats/blob/main/CHANGELOG.md"
    type = STABLE
    file = tasks.jar.archiveFile
    modLoaders.add("fabric")

    github {
        accessToken = secrets.GITHUB_TOKEN
        repository = "copycats-plus/copycats"
        commitish = "main"
    }

    modrinth {
        accessToken = secrets.MODRINTH_TOKEN
        projectId = "UT2M39wf"
        minecraftVersions.add(minecraft_version)

        requires {
            id = "LNytGWDc"
        }
        optional {
            id = "u6dRKJwZ"
        }
    }

    curseforge {
        accessToken = secrets.CURSEFORGE_TOKEN
        projectId = "968398"
        minecraftVersions.add(minecraft_version)
    }
}

wrapper {
    gradleVersion = '8.4'
    distributionType = Wrapper.DistributionType.BIN
}